#!/bin/bash

function help()
{
echo '###'
echo '###  ____'
echo '### |  _ \ ___ _ __   ___  _ __   ___ _ __ ___'
echo '### | |_) / _ \  _ \ / _ \|  _ \ / _ \  __/ _ \'
echo '### |  _ <  __/ |_) | (_) | | | |  __/ | |  __/'
echo '### |_| \_\___| .__/ \___/|_| |_|\___|_|  \___|'
echo '###           |_|'
echo '###'
echo '### Reponere Copyright (C) 2021 GPSoft S.A.'
echo '### Version: 1.0, date: 15 Mar 2021'
echo '###'
echo '### Reponere is a bash utility script to replace values in ascii files, the name is latin translation of english word "replace".'
echo '### Script accepts these arguments : -h for Help'
echo '###                                  -r for Recursive [Optional if not present take only files in directory]'
echo '###                                  -fv for File contains couple old value, new value separated by space [Optional]'
echo '###                                  -p for Directory path where are presentes file to substitute [Optional if not present take execution directory]'
echo '###                                  -f for file names to take for substitutions [Optional if not present take all files, is expressed with a regular expression]'
echo '###                                  -o old value [Optional]'
echo '###                                  -n new value [Optional]'
echo '###                                  -e suffix for file modified [Optional if is not present suffix is .wrk]'
echo '###                                  -d debug mode show differences in files [Optional]'
echo '###'
echo '### Examples of execution :'
echo '###'
echo '###       reponere -r -opippo -npluto -f*.txt '
echo '###       reponere -fv./filevalues.txt -d./DirectoryToWork '
echo '###'
}

# Default Values
suffWork='.wrk'
fileValues=''
fRec=1
fDebug=0
dirName='.'
fileName='*'
oldValue=''
newValue=''
sufFile=''

# Loop over arguments
for var in "$@"
do
   if [[ $var == -h ]]; then
      help
      exit 0
   elif [[ $var == -r ]]; then
      fRec=999
   elif [[ $var == -d ]]; then
      fDebug=1
   elif [[ ${var:0:3} == -fv ]]; then
      fileValues="${var:3}"
      if [ -z "$fileValues" ]; then
         echo '[-] Specify a value for values file.'
         exit 1
      fi
   elif [[ ${var:0:2} == -p ]]; then
      dirName="${var:2}"
      if [ -z "$dirName" ] || [ ! -d "$dirName" ]; then
         echo '[-] Value <'$dirName'> is not a correct value for directory path.'
         exit 1
      fi
   elif [[ ${var:0:2} == -f ]]; then
      fileName="${var:2}"
      if [ -z "$fileName" ]; then
         echo '[-] Specify a value for file name to work.'
         exit 1
      fi
   elif [[ ${var:0:2} == -o ]]; then
      oldValue="${var:2}"
      if [ -z "$oldValue" ]; then
         echo '[-] Specify a value for old Value.'
         exit 1
      fi
   elif [[ ${var:0:2} == -n ]]; then
      newValue="${var:2}"
   elif [[ ${var:0:2} == -e ]]; then
      sufFile="${var:2}"
      if [ -z "$sufFile" ]; then
         echo '[-] Specify a value for suffix.'
         exit 1
      fi
   fi
done

if [ "$#" -eq 0 ]; then
  help
  exit 0
fi

# Check over Parameters
if [ -z "$fileValues" ]; then
   if [ -z "$newValue" ] || [ -z "$oldValue" ]; then
      echo '[-] Error not specified file with couple of values (old/new) neither old value and new value.'
      exit 1
   fi
else
   if [[ ! -f "$fileValues" ]]; then
      echo '[-] Values file : <'$fileValues'> not exists.'
      exit 1
   fi
   if [ ! -z "$newValue" ] || [ ! -z "$oldValue" ]; then
      echo '[-] Specified with couple of values (old/new) and old value and new value, specify only a file with values or old and new value.'
      exit 1
   fi
fi

# Elaboration
if [[ ! -z "$fileValues" ]]; then
  cat $fileValues | while read line; do
     neww=${line##* };
     oldw=${line%% *};
     if [ -z "$oldw" ]; then
         echo '[-] Specify a value for old Value in file <'$fileValues'>.'
         exit 1
     fi
     find "$dirName" -maxdepth $fRec -name "$fileName" -type f | while read file; do
         sed "s/$oldw/$neww/g" $file > $file$suffWork
         if [ $fDebug -eq 1 ]; then
            echo '[+] Working File <'$file'>.'
            echo '[+] Diff : '
            diff $file $file$suffWork
            if [ $? -eq 0 ]; then
               echo '[+] No differences.'
            fi
            echo '[+] -------------------------------------------------------------- '
         fi
         mv -f $file$suffWork $file$sufFile
     done
  done
else
  echo find "$dirName" -maxdepth $fRec -name "$fileName" -type f

  find "$dirName" -maxdepth $fRec -name "$fileName" -type f |  while read file; do
       sed "s/$oldValue/$newValue/g" $file > $file$suffWork
       if [ $fDebug -eq 1 ]; then
          echo '[+] Working File <'$file'>.'
          echo '[+] Diff : '
          diff $file $file$suffWork
          if [ $? -eq 0 ]; then
             echo '[+] No differences.'
          fi
          echo '[+] -------------------------------------------------------------- '
       fi
       mv -f $file$suffWork $file$sufFile
  done
fi

exit 0
